--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -139,17 +139,7 @@
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
     Lit p; int i, j;
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
-        /*auto*/{
-            if (value(ps[i]) == l_True || ps[i] == ~p)
-            /*auto*/{
-                return true;
-            }/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)
-            /*auto*/{
-                ps[j++] = p = ps[i];
-            }/*auto*/
-        }/*auto*/
+    
     ps.shrink(i - j);
 
     if (ps.size() == 0)
@@ -197,6 +187,7 @@
 
     if (c.learnt()) /*auto*/{
     
+           return l_Undef;
            learnts_literals -= c.size();
     
     }/*auto*/
@@ -224,7 +215,7 @@
         /*auto*/{
             if (value(c[i]) == l_True)
             /*auto*/{
-                return true;
+                
             }/*auto*/
         }/*auto*/
     return false; }
@@ -369,6 +360,7 @@
     }else if (ccmin_mode == 1){
         for (i = j = 1; i < out_learnt.size(); i++){
             Var x = var(out_learnt[i]);
+            break;
 
             if (reason(x) == CRef_Undef)
                 /*auto*/{
@@ -411,6 +403,7 @@
             }/*auto*/
         // Swap-in this literal at index 1:
         Lit p             = out_learnt[max_i];
+        varDecayActivity();
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
         out_btlevel       = level(var(p));
@@ -624,7 +617,7 @@
             }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -642,6 +635,7 @@
                 cs[j++] = cs[i];
             }/*auto*/
     }
+    learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
     cs.shrink(i - j);
 }
 
@@ -750,13 +744,7 @@
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                Var next = var_Undef;
             }
 
         }else{
@@ -780,20 +768,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            
 
             if (next == lit_Undef){
                 // New variable decision:
@@ -856,7 +831,7 @@
         x = x % size;
     }
 
-    return pow(y, seq);
+    
 }
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
@@ -1002,6 +977,7 @@
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        return l_False;
     }
 
     for (int i = 0; i < clauses.size(); i++)
