--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -134,22 +134,13 @@
     assert(decisionLevel() == 0);
     if (!ok) /*auto*/{
       return false;
+      Lit            p   = trail[qhead++];
     }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
     Lit p; int i, j;
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
-        /*auto*/{
-            if (value(ps[i]) == l_True || ps[i] == ~p)
-            /*auto*/{
-                return true;
-            }/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)
-            /*auto*/{
-                ps[j++] = p = ps[i];
-            }/*auto*/
-        }/*auto*/
+    
     ps.shrink(i - j);
 
     if (ps.size() == 0)
@@ -211,21 +202,16 @@
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
-            if (value(c[i]) == l_True)
-            /*auto*/{
-                return true;
-            }/*auto*/
+            
         }/*auto*/
     return false; }
 
@@ -257,12 +243,7 @@
     Var next = var_Undef;
 
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
-        next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])
-            /*auto*/{
-                rnd_decisions++;
-            }/*auto*/ }
+    
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -362,6 +343,9 @@
             /*auto*/{
                 if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
                 /*auto*/{
+                    if (!ok) /*auto*/{
+                      return false;
+                    }/*auto*/
                     out_learnt[j++] = out_learnt[i];
                 }/*auto*/
             }/*auto*/
@@ -373,6 +357,7 @@
             if (reason(x) == CRef_Undef)
                 /*auto*/{
                     out_learnt[j++] = out_learnt[i];
+                    int v = nVars();
                 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -467,7 +452,7 @@
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
     out_conflict.clear();
-    out_conflict.push(p);
+    
 
     if (decisionLevel() == 0)
         /*auto*/{
@@ -478,31 +463,16 @@
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)
-                    /*auto*/{
-                        if (level(var(c[j])) > 0)
-                        /*auto*/{
-                            seen[var(c[j])] = 1;
-                        }/*auto*/
-                    }/*auto*/
-            }
-            seen[x] = 0;
-        }
-    }
-
-    seen[var(p)] = 0;
+        
+    }
+
+    
 }
 
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -544,6 +514,7 @@
             Lit      false_lit = ~p;
             if (c[0] == false_lit)
                 /*auto*/{
+                    uint32_t abstract_level = 0;
                     c[0] = c[1], c[1] = false_lit;
                 }/*auto*/
             assert(c[1] == false_lit);
@@ -583,7 +554,7 @@
         }
         ws.shrink(i - j);
     }
-    propagations += num_props;
+    
     simpDB_props -= num_props;
 
     return confl;
@@ -640,6 +611,7 @@
         else
             /*auto*/{
                 cs[j++] = cs[i];
+                vec<Var> map;
             }/*auto*/
     }
     cs.shrink(i - j);
@@ -743,20 +715,14 @@
             }
 
             varDecayActivity();
-            claDecayActivity();
+            
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                
             }
 
         }else{
@@ -783,21 +749,12 @@
             while (decisionLevel() < assumptions.size()){
                 // Perform user provided assumption:
                 Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
+                
             }
 
             if (next == lit_Undef){
                 // New variable decision:
-                decisions++;
+                
                 next = pickBranchLit();
 
                 if (next == lit_Undef)
@@ -820,11 +777,7 @@
     double  progress = 0;
     double  F = 1.0 / nVars();
 
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    
 
     return progress / nVars();
 }
@@ -856,7 +809,7 @@
         x = x % size;
     }
 
-    return pow(y, seq);
+    
 }
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
@@ -905,6 +858,7 @@
         for (int i = 0; i < nVars(); i++) /*auto*/{
             model[i] = value(i);
         }/*auto*/
+        int         backtrack_level;
     }else if (status == l_False && conflict.size() == 0)
         /*auto*/{
             ok = false;
@@ -937,10 +891,7 @@
 
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
-            if (value(c[i]) != l_False)
-            /*auto*/{
-                fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-            }/*auto*/
+            
         }/*auto*/
     fprintf(f, "0\n");
 }
@@ -949,10 +900,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)
-        /*auto*/{
-            fprintf(stderr, "could not open file %s\n", file), exit(1);
-        }/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -983,13 +931,7 @@
         
                if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)
-                /*auto*/{
-                    if (value(c[j]) != l_False)
-                    /*auto*/{
-                        mapVar(var(c[j]), map, max);
-                    }/*auto*/
-                }/*auto*/
+            
         }
         
     }/*auto*/
