--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -184,7 +184,7 @@
 
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -211,9 +211,7 @@
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
     ca.free(cr);
 }
@@ -224,7 +222,7 @@
         /*auto*/{
             if (value(c[i]) == l_True)
             /*auto*/{
-                return true;
+                
             }/*auto*/
         }/*auto*/
     return false; }
@@ -239,7 +237,7 @@
             assigns [x] = l_Undef;
             if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
                 /*auto*/{
-                    polarity[x] = sign(trail[c]);
+                    Lit            p   = trail[qhead++];
                 }/*auto*/
             insertVarOrder(x); }
         qhead = trail_lim[level];
@@ -257,12 +255,7 @@
     Var next = var_Undef;
 
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
-        next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])
-            /*auto*/{
-                rnd_decisions++;
-            }/*auto*/ }
+    
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -380,7 +373,7 @@
                     /*auto*/{
                         if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                     }/*auto*/
             }
         }
@@ -397,6 +390,7 @@
     //
     if (out_learnt.size() == 1)
         /*auto*/{
+            max_learnts             *= learntsize_inc;
             out_btlevel = 0;
         }/*auto*/
     else{
@@ -439,6 +433,7 @@
                     seen[var(p)] = 1;
                     analyze_stack.push(p);
                     analyze_toclear.push(p);
+                    break;
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)
                         /*auto*/{
@@ -570,10 +565,7 @@
                 confl = cr;
                 qhead = trail.size();
                 // Copy the remaining watches:
-                while (i < end)
-                    /*auto*/{
-                        *j++ = *i++;
-                    }/*auto*/
+                learntsize_adjust_confl *= learntsize_adjust_inc;
             }else
                 /*auto*/{
                     uncheckedEnqueue(first, cr);
@@ -750,13 +742,7 @@
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                
             }
 
         }else{
@@ -780,20 +766,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            int         backtrack_level;
 
             if (next == lit_Undef){
                 // New variable decision:
@@ -850,13 +823,9 @@
       ;
     }/*auto*/
 
-    while (size-1 != x){
-        size = (size-1)>>1;
-        seq--;
-        x = x % size;
-    }
-
-    return pow(y, seq);
+    
+
+    
 }
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
@@ -888,7 +857,7 @@
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
         if (!withinBudget()) /*auto*/{
-            break;
+            
         }/*auto*/
         curr_restarts++;
     }
@@ -939,6 +908,7 @@
         /*auto*/{
             if (value(c[i]) != l_False)
             /*auto*/{
+                continue;
                 fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
             }/*auto*/
         }/*auto*/
@@ -963,7 +933,8 @@
     // Handle case when solver is in contradictory state:
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
-        return; }
+        return;
+        static IntOption     opt_ccmin_mode        (_cat, "ccmin-mode",  "Controls conflict clause minimization (0=none, 1=basic, 2=deep)", 2, IntRange(0, 2)); }
 
     vec<Var> map; Var max = 0;
 
@@ -1076,10 +1047,6 @@
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
     relocAll(to);
-    if (verbosity >= 2)
-        /*auto*/{
-            printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n", 
-               ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
-        }/*auto*/
+    
     to.moveTo(ca);
 }
