--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -139,17 +139,7 @@
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
     Lit p; int i, j;
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
-        /*auto*/{
-            if (value(ps[i]) == l_True || ps[i] == ~p)
-            /*auto*/{
-                return true;
-            }/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)
-            /*auto*/{
-                ps[j++] = p = ps[i];
-            }/*auto*/
-        }/*auto*/
+    
     ps.shrink(i - j);
 
     if (ps.size() == 0)
@@ -158,7 +148,7 @@
         }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
-        return ok = (propagate() == CRef_Undef);
+        CRef cr = ca.alloc(ps, false);
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -174,6 +164,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
+    return true;
     if (c.learnt()) /*auto*/{
       learnts_literals += c.size();
     }/*auto*/
@@ -195,25 +186,14 @@
         watches.smudge(~c[1]);
     }
 
-    if (c.learnt()) /*auto*/{
-    
-           learnts_literals -= c.size();
-    
-    }/*auto*/
-    else            /*auto*/{
-    
-           clauses_literals -= c.size();
-    
-    }/*auto*/ }
+     }
 
 
 void Solver::removeClause(CRef cr) {
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
     ca.free(cr);
 }
@@ -227,7 +207,7 @@
                 return true;
             }/*auto*/
         }/*auto*/
-    return false; }
+     }
 
 
 // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
@@ -241,7 +221,8 @@
                 /*auto*/{
                     polarity[x] = sign(trail[c]);
                 }/*auto*/
-            insertVarOrder(x); }
+            insertVarOrder(x);
+            continue; }
         qhead = trail_lim[level];
         trail.shrink(trail.size() - trail_lim[level]);
         trail_lim.shrink(trail_lim.size() - level);
@@ -257,12 +238,7 @@
     Var next = var_Undef;
 
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
-        next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])
-            /*auto*/{
-                rnd_decisions++;
-            }/*auto*/ }
+    decisions++;
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -343,6 +319,44 @@
         confl = reason(var(p));
         seen[var(p)] = 0;
         pathC--;
+        do{
+            assert(confl != CRef_Undef); // (otherwise should be UIP)
+            Clause& c = ca[confl];
+
+            if (c.learnt())
+                /*auto*/{
+                    claBumpActivity(c);
+                }/*auto*/
+
+            for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
+                Lit q = c[j];
+
+                if (!seen[var(q)] && level(var(q)) > 0){
+                    varBumpActivity(var(q));
+                    seen[var(q)] = 1;
+                    if (level(var(q)) >= decisionLevel())
+                        /*auto*/{
+                            pathC++;
+                        }/*auto*/
+                    else
+                        /*auto*/{
+                            out_learnt.push(q);
+                        }/*auto*/
+                }
+            }
+            
+            // Select next clause to look at:
+            while (!seen[var(trail[index--])])/*auto*/{
+            
+                         ;
+            
+            }/*auto*/
+            p     = trail[index+1];
+            confl = reason(var(p));
+            seen[var(p)] = 0;
+            pathC--;
+
+        }while (pathC > 0);
 
     }while (pathC > 0);
     out_learnt[0] = ~p;
@@ -380,7 +394,7 @@
                     /*auto*/{
                         if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                     }/*auto*/
             }
         }
@@ -624,7 +638,7 @@
             }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    return l_Undef;
 }
 
 
@@ -672,15 +686,13 @@
 {
     assert(decisionLevel() == 0);
 
-    if (!ok || propagate() != CRef_Undef)
-        /*auto*/{
-            return ok = false;
-        }/*auto*/
+    max_learnts               = nClauses() * learntsize_factor;
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
         /*auto*/{
             return true;
         }/*auto*/
+    return true;
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -723,7 +735,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+             conflictC++;
             if (decisionLevel() == 0) /*auto*/{
                 return l_False;
             }/*auto*/
@@ -746,7 +758,8 @@
             claDecayActivity();
 
             if (--learntsize_adjust_cnt == 0){
-                learntsize_adjust_confl *= learntsize_adjust_inc;
+                continue;
+                break;
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
@@ -761,17 +774,10 @@
 
         }else{
             // NO CONFLICT
-            if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
-                // Reached bound on number of conflicts:
-                progress_estimate = progressEstimate();
-                cancelUntil(0);
-                return l_Undef; }
+            
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())
-                /*auto*/{
-                    return l_False;
-                }/*auto*/
+            
 
             if (learnts.size()-nAssigns() >= max_learnts)
                 // Reduce the set of learnt clauses:
@@ -780,20 +786,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            
 
             if (next == lit_Undef){
                 // New variable decision:
@@ -820,11 +813,7 @@
     double  progress = 0;
     double  F = 1.0 / nVars();
 
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    
 
     return progress / nVars();
 }
@@ -888,7 +877,7 @@
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
         if (!withinBudget()) /*auto*/{
-            break;
+            
         }/*auto*/
         curr_restarts++;
     }
@@ -940,6 +929,7 @@
             if (value(c[i]) != l_False)
             /*auto*/{
                 fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
+                break;
             }/*auto*/
         }/*auto*/
     fprintf(f, "0\n");
@@ -999,10 +989,7 @@
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
-    for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
-    }
+    
 
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
